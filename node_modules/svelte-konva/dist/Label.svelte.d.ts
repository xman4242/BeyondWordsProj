import { SvelteComponentTyped } from "svelte";
import Konva from 'konva';
import { type KonvaEvents } from './util/events';
declare const __propDef: {
    props: {
        config: Konva.LabelConfig;
        handle?: import("konva/lib/shapes/Label").Label | undefined;
        staticConfig?: boolean | undefined;
    };
    slots: {
        default: {};
    };
    events: KonvaEvents;
};
export type LabelProps = typeof __propDef.props;
export type LabelEvents = typeof __propDef.events;
export type LabelSlots = typeof __propDef.slots;
/**
 * The Label component needs to be placed either inside a svelte-konva Layer or Group component.
 *
 * To work as intended it needs to contain a Tag component as well as a Text component in the order shown below.
 *
 * ### Usage:
 * ```tsx
 * <Label config={{x: 100, y: 100, opacity: 0.8}}>
 * <Tag config={{fill: "black", pointerDirection: "down", pointerWidth: 10, pointerHeight: 10, lineJoin: "round" }} />
 * <Text config={{ text: "some label text", fontSize: 18, padding: 10, fill: "white" }} />
 * </Label>
 * ```
 *
 * ### Static config:
 * By default svelte-konva will automatically update your config prop on `dragend` and `transformend` events to match the config state (position, rotation, scale, ...) with the internal Konva state.
 * If you additionally bind the config prop your reactive blocks will also be triggered once this happens.
 * There might be cases where this behavior is not beneficial in this case you can disable it by passing the `staticConfig = true` prop to the component.
 *
 * Further information: [Konva API docs](https://konvajs.org/api/Konva.Label.html), [svelte-konva docs](https://konvajs.org/docs/svelte)
 */
export default class Label extends SvelteComponentTyped<LabelProps, LabelEvents, LabelSlots> {
}
export {};
